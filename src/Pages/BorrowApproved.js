import React, { useEffect, useState } from "react";
import ITDashboard from "./ITDashboard";
import "./BorrowApproved.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSyncAlt, faPrint, faEye, faSearch } from "@fortawesome/free-solid-svg-icons";
import { useNavigate } from "react-router-dom";
import { jsPDF } from "jspdf";

const BorrowApproved = () => {
  const [borrowRequests, setBorrowRequests] = useState([]);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [receiverName, setReceiverName] = useState("");
  const [loading, setLoading] = useState(true);
  const [searchDate, setSearchDate] = useState("");
  const navigate = useNavigate();
  const [filteredRequests, setFilteredRequests] = useState([]);


  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await fetch("http://newstock.sat.or.th:5001/api/borrow-requests");
      const data = await response.json();
      setBorrowRequests(data);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching borrow requests:", error);
      setLoading(false);
    }
  };

  const approvedRequests = borrowRequests.filter(
    (request) => request.status === "Approved"
  );

  const handleViewDetails = (request) => {
    setSelectedRequest(request);
    setReceiverName("");
  };

  const handleCloseDetails = () => {
    setSelectedRequest(null);
    setReceiverName("");
  };

  const handleReceiveConfirm = async () => {
    if (!receiverName.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á");
      return;
    }
  
    try {
      const response = await fetch(
        `http://newstock.sat.or.th:5001/api/borrow-requests/${selectedRequest.id}/receive`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            received_by: receiverName,
            date_received: new Date().toISOString().split('T')[0],
          }),
        }
      );
  
      if (response.ok) {
        alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        handleCloseDetails();
        fetchData(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }
    } catch (error) {
      console.error("Error updating receive status:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
  };
  
  const handleSearch = () => {
    const filteredData = borrowRequests.filter((req) => {
      return new Date(req.request_date).toLocaleDateString("th-TH") === new Date(searchDate).toLocaleDateString("th-TH");
    });
    setBorrowRequests(filteredData);
  };

  const handlePrint = (request) => {
    const doc = new jsPDF();
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(18);
    doc.text("‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", 70, 20);
    doc.setFontSize(12);
    doc.setFont("Helvetica", "normal");

    let y = 40;
    const lineHeight = 10;

    const addText = (label, value) => {
        doc.text(`${label} ${value}`, 20, y);
        y += lineHeight;
    };

    addText("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:", request.borrower_name);
    addText("‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å:", request.department);
    addText("‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", request.equipment);
    addText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:", new Date(request.request_date).toLocaleDateString("th-TH"));
    addText("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", request.quantity_requested);

    doc.text("__________________________", 50, y + 20);
    doc.text("‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á", 70, y + 30);

    doc.save(`Borrow_Request_${request.borrower_name}.pdf`);
};
const handleApproveRequest = async (requestId) => {
  const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ?");
  
  if (!isConfirmed) {
      alert("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
      return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Cancel
  }

  try {
      const response = await fetch(`http://newstock.sat.or.th:5001/api/borrow-requests/${requestId}/approve`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ status: "Approved" }),
      });

      const responseData = await response.json();

      if (!response.ok) {
          console.error("üî• API Error:", responseData);
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠: " + responseData.error);
          return;
      }

      alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchData(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  } catch (error) {
      console.error("üî• Fetch Error:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
  }
};


  return (
    <div>
      <ITDashboard />
      <div className="borrow-approved-container">
  <h1 className="borrow-approved-title">
    <FontAwesomeIcon icon={faSyncAlt} /> ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
  </h1>
  <div className="borrw-search-container">
          <input 
            type="date" 
            value={searchDate} 
            onChange={(e) => setSearchDate(e.target.value)} 
          />
          <button onClick={handleSearch}>
            <FontAwesomeIcon icon={faSearch} /> ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </button>
        </div>
        <div className="borrow-approved-list">
                    {loading ? (
                        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                    ) : (
                        <table className="borrow-approved-table">
                            <thead>
                                <tr>
                                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°</th>
                                    <th>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å</th>
                                    <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°</th>
                                    <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                                    <th>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                                    <th>‡∏û‡∏¥‡∏°‡∏û‡πå</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredRequests.length > 0 ? (
                                    filteredRequests.map((req, index) => (
                                        <tr key={req.id}>
                                            <td>{index + 1}</td>
                                            <td>{req.borrower_name}</td>
                                            <td>{req.department}</td>
                                            <td>{req.equipment}</td>
                                            <td>{new Date(req.request_date).toLocaleDateString("th-TH")}</td>
                                            <td>{req.quantity_requested}</td>
                                            <td><button onClick={() => handleViewDetails(req)}><FontAwesomeIcon icon={faEye} /> ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button></td>
                                            <td><button onClick={() => handlePrint(req)}><FontAwesomeIcon icon={faPrint} /> ‡∏û‡∏¥‡∏°‡∏û‡πå</button></td>
                                        </tr>
                                    ))
                                ) : (
                                    <tr>
                                        <td colSpan="8">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    )}
                </div>
        <div className="borrow-approved-footer">
          <button className="borrow-approved-back-button" onClick={() => navigate(-1)}>
            ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
          </button>
        </div>
</div>
        {selectedRequest && (
  <div className="borrow-approved-modal-overlay">
    <div className="borrow-approved-modal-content">
      <span className="borrow-approved-modal-close" onClick={handleCloseDetails}>
        &times;
      </span>
      <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠</h3>

      <div className="borrow-approved-form-grid">
        <div className="borrow-approved-form-group">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</label>
          <input type="text" value={selectedRequest.borrower_name} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å:</label>
          <input type="text" value={selectedRequest.department} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</label>
          <input type="text" value={selectedRequest.phone} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
          <input type="text" value={selectedRequest.email} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏ß‡∏±‡∏™‡∏î‡∏∏/‡∏£‡∏∏‡πà‡∏ô:</label>
          <input type="text" value={selectedRequest.material} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
          <input type="text" value={selectedRequest.type || "-"} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
          <input type="text" value={selectedRequest.equipment} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</label>
          <input type="text" value={selectedRequest.brand} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
          <input type="text" value={selectedRequest.quantity_requested} readOnly />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</label>
          <input
            type="text"
            value={new Date(selectedRequest.request_date).toLocaleDateString("th-TH")}
            readOnly
          />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô:</label>
          <input
            type="text"
            value={
              selectedRequest.return_date
                ? new Date(selectedRequest.return_date).toLocaleDateString("th-TH")
                : "-"
            }
            readOnly
          />
        </div>
        <div className="borrow-approved-form-group">
          <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</label>
          <input type="text" value={selectedRequest.note || "-"} readOnly />
        </div>
      </div>

      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á */}
      <div className="receive-section">
        <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á:</label>
        <input
          type="text"
          value={receiverName}
          onChange={(e) => setReceiverName(e.target.value)}
        />
        <button className="confirm-receive-button" onClick={handleApproveRequest}>
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á
        </button>
      </div>
    </div>
  </div>
)}
      </div>
  );
};

export default BorrowApproved;