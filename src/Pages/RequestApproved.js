import React, { useEffect, useState } from "react";
import { useNavigate } from 'react-router-dom';
import ITDashboard from "./ITDashboard";
import "./RequestApproved.css";
import { jsPDF } from "jspdf";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCheck, faEye, faArrowLeft, faSearch } from "@fortawesome/free-solid-svg-icons";
 
const RequestApproved = () => {
    const [approvedRequests, setApprovedRequests] = useState([]);
    const [filteredRequests, setFilteredRequests] = useState([]);
    const [searchDate, setSearchDate] = useState("");
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const [selectedRequest, setSelectedRequest] = useState(null);
    const [remainingStock, setRemainingStock] = useState("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö");
    const [receiverName, setReceiverName] = useState("");
 
 
 
    useEffect(() => {
      const fetchApprovedRequests = async () => {
        try {
          const response = await fetch("http://localhost:5001/api/requests");
          const data = await response.json();
 
          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
          const filtered = data.filter(req => req.status === "Approved");
          setApprovedRequests(filtered);
          setFilteredRequests(filtered);
          setLoading(false);
        } catch (error) {
          console.error("Error fetching requests:", error);
          setLoading(false);
        }
      };
 
      fetchApprovedRequests();
  }, [])
 
  useEffect(() => {
    if (selectedRequest) {
      fetch(`http://localhost:5001/api/products/model/${selectedRequest.material}`)
        .then((res) => res.json())
        .then((data) => setRemainingStock(data.remaining || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"))
        .catch((error) => {
          console.error("Error fetching remaining stock:", error);
          setRemainingStock("‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö");
        });
    }
  }, [selectedRequest]);
 
  const handleViewDetails = async (request) => {
    try {
      const response = await fetch(`http://localhost:5001/api/products/model/${request.material}`);
      const data = await response.json();
 
      console.log("API Response:", data); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API
 
      setSelectedRequest({
        ...request,
        remaining: data.remaining !== undefined && data.remaining !== null ? data.remaining : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      });
    } catch (error) {
      console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:", error);
      setSelectedRequest({ ...request, remaining: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
  };
 
 
  const handleCloseDetails = () => {
    setSelectedRequest(null);
  };
 
  const handleSearch = () => {
    if (searchDate) {
      const formattedSearchDate = new Date(searchDate).toLocaleDateString("th-TH");
 
      const filtered = approvedRequests.filter((request) => {
        const requestDate = new Date(request.date_requested).toLocaleDateString("th-TH");
        return requestDate === formattedSearchDate;
      });
 
      setFilteredRequests(filtered);
    } else {
      setFilteredRequests(approvedRequests);
    }
  };
 
  const getStatusInThai = (status) => {
    switch (status) {
      case "Approved":
        return "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß";
      case "Pending":
        return "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
      case "Rejected":
        return "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
      case "Received":
        return "‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß";
      default:
        return status;
    }
  };
 
  const handleApproveRequest = async (requestId) => {
    const isConfirmed = window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ?");
   
    if (!isConfirmed) {
        alert("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
        return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Cancel
    }
 
    try {
        const response = await fetch(`http://localhost:5001/api/requests/${requestId}/approve`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ status: "Approved" }),
        });
 
        const responseData = await response.json();
 
        if (!response.ok) {
            console.error("üî• API Error:", responseData);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏Ç‡∏≠: " + responseData.error);
            return;
        }
 
        alert("‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setApprovedRequests((prev) =>
            prev.map((req) => (req.id === requestId ? { ...req, status: "Received" } : req))
        );
    } catch (error) {
        console.error("üî• Fetch Error:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
};
 
 
const handleReceiveItem = async (requestId) => {
  if (!receiverName.trim()) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á");
    return;
  }

  try {
    console.log("üì§ Sending Data:", {
      received_by: receiverName,
      date_received: new Date().toISOString().split('T')[0]
    });

    const response = await fetch(`http://localhost:5001/api/requests/${requestId}/receive`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        received_by: receiverName,
        date_received: new Date().toISOString().split('T')[0], // YYYY-MM-DD
      }),
    });

    const responseData = await response.json();

    if (!response.ok) {
      console.error("üî• API Error:", responseData);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: " + responseData.error);
      return;
    }

    alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô '‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô State ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    setApprovedRequests((prev) =>
      prev.map((req) =>
        req.id === requestId ? { ...req, status: "Received", received_by: receiverName } : req
      )
    );

    setFilteredRequests((prev) =>
      prev.map((req) =>
        req.id === requestId ? { ...req, status: "Received", received_by: receiverName } : req
      )
    );

    setSelectedRequest((prev) => ({
      ...prev,
      status: "Received",
      received_by: receiverName,
    }));

  } catch (error) {
    console.error("üî• Fetch Error:", error);
    alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
  }
};

 
  const handleGeneratePDF = (request) => {
    const doc = new jsPDF();
 
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(18);
    doc.text("‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", 70, 20);
 
    doc.setFontSize(12);
    doc.setFont("Helvetica", "normal");
 
    let y = 40;
    const lineHeight = 10;
 
    const addText = (label, value) => {
      doc.text(`${label} ${value}`, 20, y);
      y += lineHeight;
    };
 
    addText("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:", request.borrower_name);
    addText("‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å:", request.department);
    addText("‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:", request.phone);
    addText("‡∏≠‡∏µ‡πÄ‡∏°‡∏•:", request.email);
    addText("‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", request.equipment);
    addText("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:", request.brand);
    addText("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", request.quantity_requested);
    addText("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:", new Date(request.date_requested).toLocaleDateString("th-TH"));
 
    doc.text("__________________________", 50, y + 20);
    doc.text("‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á", 70, y + 30);
 
    doc.save(`‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å_${request.borrower_name}.pdf`);
  };
 
  const handlePrint = (request) => {
    const printWindow = window.open("", "_blank");
    printWindow.document.write(`
        <html>
        <head>
            <title>‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                h2 { text-align: center; }
                table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                th, td { border: 1px solid black; padding: 10px; text-align: left; }
                .signature { margin-top: 40px; }
            </style>
        </head>
        <body>
            <h2>‡πÉ‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
            <table>
                <tr><th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</th><td>${request.borrower_name}</td></tr>
                <tr><th>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å:</th><td>${request.department}</td></tr>
                <tr><th>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</th><td>${request.phone}</td></tr>
                <tr><th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</th><td>${request.email}</td></tr>
                <tr><th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</th><td>${request.equipment}</td></tr>
                <tr><th>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</th><td>${request.brand}</td></tr>
                <tr><th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</th><td>${request.quantity_requested}</td></tr>
                <tr><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</th><td>${new Date(request.date_requested).toLocaleDateString("th-TH")}</td></tr>
            </table>
            <div class="signature">
                <p>‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á: ___________________________</p>
            </div>
            <script>
                window.onload = function() {
                    window.print();
                };
            </script>
        </body>
        </html>
    `);
    printWindow.document.close();
};
 
 
 
  return (
    <div>
      <ITDashboard />
      <div className="request-approved-container">
            <h1 className="request-approved-title"><FontAwesomeIcon icon={faCheck} /> ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h1>
            {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà */}
            <div className="search-container">
                <input
                    type="date"
                    value={searchDate}
                    onChange={(e) => setSearchDate(e.target.value)}
                />
                <button onClick={handleSearch}>
                    <FontAwesomeIcon icon={faSearch} /> ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                </button>
            </div>
            <div className="request-approved-list">
                {loading ? (
                    <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                ) : (
                <table className="request-approved-table">
                <thead>
                    <tr>
                        <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠</th>
                        <th>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å</th>
                        <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                        <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠</th>
                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                        <th>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                        <th>‡∏û‡∏¥‡∏°‡∏û‡πå</th> {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Print */}
                    </tr>
                </thead>
                <tbody>
                    {filteredRequests.length > 0 ? (
                        filteredRequests.map((req, index) => (
                        <tr key={req.id}>
                            <td>{index + 1}</td>
                            <td>{req.borrower_name}</td>
                            <td>{req.department}</td>
                            <td>{req.equipment}</td>
                            <td>{new Date(req.date_requested).toLocaleDateString("th-TH")}</td>
                            <td>{req.quantity_requested}</td>
                            <td>
                                <button
                                    className="request-approved-detail-button"
                                    onClick={() => handleViewDetails(req)}
                                >
                                    <FontAwesomeIcon icon={faEye} /> ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                                </button>
                            </td>
                            <td>
                                <button
                                    className="print-button"
                                    onClick={() => handlePrint(req)}
                                >
                                    üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå
                                </button>
                            </td>
                        </tr>
                        ))
                    ) : (
                    <tr>
                        <td colSpan="8" style={{ textAlign: "center", fontWeight: "bold", padding: "20px", color: "#000" }}>
                            ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </td>
                    </tr>
                    )}
                </tbody>
            </table>
            )}
        </div>
 
        {/* Modal ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
        {selectedRequest && (
        <div className="request-approved-modal-overlay">
    <div className="request-approved-modal-content">
      <span className="request-approved-modal-close" onClick={handleCloseDetails}>
        &times;
      </span>
      <h3>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠</h3>
      <div className="request-approved-form-grid">
        <div className="request-approved-form-group">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏Ç‡∏≠:</label>
          <input type="text" value={selectedRequest.borrower_name} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å:</label>
          <input type="text" value={selectedRequest.department} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</label>
          <input type="text" value={selectedRequest.phone} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</label>
          <input type="text" value={selectedRequest.email} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏ß‡∏±‡∏™‡∏î‡∏∏/‡∏£‡∏∏‡πà‡∏ô:</label>
          <input type="text" value={selectedRequest.material} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
          <input type="text" value={selectedRequest.type || "-"} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
          <input type="text" value={selectedRequest.equipment} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</label>
          <input type="text" value={selectedRequest.brand} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
          <input type="text" value={selectedRequest.quantity_requested} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠:</label>
          <input
            type="text"
            value={new Date(selectedRequest.date_requested).toLocaleDateString("th-TH")}
            readOnly
          />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</label>
          <input type="text" value={selectedRequest.remaining || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
          <input type="text" value={getStatusInThai(selectedRequest.status)} readOnly />
        </div>
        <div className="request-approved-form-group">
          <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</label>
          <input type="text" value={selectedRequest.note || "-"} readOnly />
        </div>
      </div>
 
      {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á */}
      {selectedRequest.status !== "Received" && (
        <div className="receive-section">
          <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á:</label>
          <input
            type="text"
            value={receiverName}
            onChange={(e) => setReceiverName(e.target.value)}
            placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á"
          />
          <button
            className="confirm-receive-button"
            onClick={() =>handleApproveRequest(selectedRequest.id)}
            disabled={!receiverName.trim()}
          >
            ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á
          </button>
        </div>
      )}
    </div>
  </div>
)}
 
 
        <div className="request-approved-footer">
          <button className="request-approved-back-button" onClick={() => navigate(-1)}>
            <FontAwesomeIcon icon={faArrowLeft} /> ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
          </button>
        </div>
      </div>
    </div>
  );
};
 
export default RequestApproved;
 