import React, { useState, useEffect } from "react";
import ITDashboard from "./ITDashboard";
import "./Settings.css";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCog } from "@fortawesome/free-solid-svg-icons";

const Settings = () => {
  const [data, setData] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [newCategoryType, setNewCategoryType] = useState(" "); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const [editingIndex, setEditingIndex] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [editedItem, setEditedItem] = useState({}); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [showModal, setShowModal] = useState(false); // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Modal
  const [categories, setCategories] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const [newCategory, setNewCategory] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà
  const [editingRow, setEditingRow] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [equipments, setEquipments] = useState([]); // ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const [newEquipment, setNewEquipment] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
  const [editingEquipmentRow, setEditingEquipmentRow] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö index ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [showEquipmentsModal, setShowEquipmentsModal] = useState(false); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal
  const [editingBrandName, setEditingBrandName] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
  const [editingBrandIndex, setEditingBrandIndex] = useState(null); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö index ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [newBrand, setNewBrand] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
  const [brands, setBrands] = useState([]); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î  
  const [showBrandModal, setShowBrandModal] = useState(false); // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Modal
  const [selectedCategory, setSelectedCategory] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const [newCategoryName, setNewCategoryName] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà
  const [newModel, setNewModel] = useState(""); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ state
  const [editingBrandId, setEditingBrandId] = useState(null);
  const [showEditModal, setShowEditModal] = useState(false); // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Modal ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [currentEditItem, setCurrentEditItem] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [newEquipmentNumber, setNewEquipmentNumber] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
  const [newSerial, setNewSerial] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Serial Number
  const [newInventory, setNewInventory] = useState(1); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 1)
  const [newDetails, setNewDetails] = useState(""); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  const [editingBrand, setEditingBrand] = useState(""); // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [showAddProductModal, setShowAddProductModal] = useState(false);
  const [newProductName, setNewProductName] = useState("");
  const [newProductBrand, setNewProductBrand] = useState("");
  const [newProductCategory, setNewProductCategory] = useState("");
  const [newProductDetails, setNewProductDetails] = useState("");
  const [products, setProducts] = useState([]);


  console.log("Selected Items:", selectedItems);
  console.log({ newModel, newEquipment });
  console.log("Name being sent:", newBrand);
  console.log("Editing Index Cleared:", editingBrandIndex); // Debug
  console.log("Editing Brand Cleared:", editingBrandName); // Debug
  console.log("Data being sent:", currentEditItem);



  useEffect(() => {
    const fetchAllData = async () => {
      await fetchDropdownData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dropdown
      await fetchProducts(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Products
      await fetchBrands(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Brands
      await fetchEquipments();
      
    };
  
    fetchAllData();
  }, []);
  
  
  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:5001/api/products');
      if (response.data.success) {
        setData(response.data.data); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ State ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        console.log("Fetched data:", response.data.data);
      }
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  
  const handleRefresh = () => {
    fetchData(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  };
  
  useEffect(() => {
    console.log("Selected Items:", selectedItems); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• selectedItems ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  }, [selectedItems]);
  

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:5001/api/products');
        if (response.data.success) {
          setData(response.data.data); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ State `data` ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
          console.log("Fetched data:", response.data.data); // Debug ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };
  
    fetchData();
  }, []);
  
  const handleCheckboxChange = (itemId) => {
    setSelectedItems(prevSelected =>
        prevSelected.includes(itemId)
            ? prevSelected.filter(id => id !== itemId) // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            : [...prevSelected, itemId] // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    );
};

  useEffect(() => { 
    if (currentEditItem) {
      setCurrentEditItem((prev) => ({
        ...prev,
        id: prev.id || "", 
        material: prev.material || "",
        category: prev.category || "",
        equipment: prev.equipment || "",
        brand_name: prev.brand_name || "", // ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        inventory_number: prev.inventory_number || 0,
        details: prev.details || "-",
        equipment_number: prev.equipment_number || "-",
      }));
    }
  }, [currentEditItem]);
  
  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const response = await axios.get('http://localhost:5001/api/options');
        if (response.data.success) {
          setCategories(response.data.categories);
          setEquipments(response.data.equipments);
          setBrands(response.data.brands);
        }
      } catch (error) {
        console.error('Error fetching options:', error);
      }
    };
    fetchOptions();
  }, []);

  const [filters, setFilters] = useState({
    categories: [],
    equipment: [],
    brands: [],
  });
  
  useEffect(() => {
    const fetchFilters = async () => {
      try {
        const response = await axios.get('http://localhost:5001/api/filters');
        if (response.data.success) {
          setFilters(response.data.data);
        }
      } catch (error) {
        console.error('Error fetching filters:', error);
      }
    };
    fetchFilters();
  }, []);
  
  
  const handleEditClick = (item) => {
    setCurrentEditItem({
      id: item.id || "", 
      name: item.material || "",
      category: item.category || "",
      equipment: item.equipment || "",
      brand: item.brand || "",
      equipment_number: item.equipment_number || "-",
      serial_number: item.serial_number || "-",
      inventory_number: item.inventory_number || 0,
      details: item.details !== "-" ? item.details || "" : "",  // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    });
    setShowEditModal(true);
};


  useEffect(() => {
    console.log("Current Edit Item:", currentEditItem);
  }, [currentEditItem]);
  

  
  const handleInputChange = (field, value) => {
    setCurrentEditItem((prev) => ({ ...prev, [field]: value }));
  };
  
  const handleSave = async () => {
    try {
      const payload = {
        name: currentEditItem.name || "-",
        category_name: currentEditItem.category || "-",
        equipment: currentEditItem.equipment || "-",
        brand_name: currentEditItem.brand || "-",
        equipment_number: currentEditItem.equipment_number || "-",
        serial_number: currentEditItem.serial_number || "-",
        inventory_number: currentEditItem.inventory_number || 1,
        details: currentEditItem.details.trim() === "-" ? "" : currentEditItem.details.trim(), // ‚úÖ ‡∏•‡∏ö "-" ‡∏≠‡∏≠‡∏Å
      };

      console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", payload);

      const response = await axios.put(
        `http://localhost:5001/api/products/${currentEditItem.id}`,
        payload
      );

      if (response.data.success) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        setShowEditModal(false);
        fetchData();
      } else {
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error("‚ùå Error updating data:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
};


  const openEditModal = (item) => {
    console.log("Item received:", item);
    setCurrentEditItem({
      id: item.id || "",
      name: item.material || "",
      category: item.category_name || "",
      equipment: item.equipment || "",
      brand_name: item.brand || "",
      equipment_number: item.equipment_number || "-",
      serial_number: item.serial_number || "-",
      inventory_number: item.inventory_number || 0,
      details: item.details || "-",
    });
    setShowEditModal(true);
  };
   
  const handleCancel = () => {
    setShowEditModal(false); // ‡∏õ‡∏¥‡∏î Modal
    setCurrentEditItem(null); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  };
  
  const handleDeleteSelected = async () => {
    if (selectedItems.length === 0) {
        alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö");
        return;
    }

    if (!window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    console.log("üìå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", selectedItems); // ‚úÖ Debug

    try {
        const response = await axios.delete("http://localhost:5001/api/products", {
            data: { ids: selectedItems } // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á ID ‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏õ
        });

        console.log("üìå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", response.data); // ‚úÖ Debug

        if (response.data.success) {
            alert(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (${response.data.message})`);

            // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            setData(prevData => prevData.filter(item => !selectedItems.includes(item.id)));

            setSelectedItems([]); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        } else {
            alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: " + response.data.message);
        }
    } catch (error) {
        console.error("‚ùå Error deleting items:", error.response?.data || error.message);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
};

  
const [showDeleteModal, setShowDeleteModal] = useState(false);

const handleDeleteConfirm = async () => {
  setShowDeleteModal(false); // ‡∏õ‡∏¥‡∏î Modal
  try {
    const response = await axios.post("http://localhost:5001/api/products/delete", {
      ids: selectedItems,
    });

    if (response.data.success) {
      setData((prevData) =>
        prevData.filter((item) => !selectedItems.includes(item.id))
      );
      setSelectedItems([]);
      alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } catch (error) {
    console.error("Error deleting items:", error.response?.data || error.message);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  }
};

  const handleShowModal = async () => {
  try {
    const response = await axios.get("http://localhost:5001/api/categories");
    console.log("Categories data:", response.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setCategories(response.data.data || []);
    setShowModal(true); //
    console.log("Modal state set to:", showModal);
  } catch (error) {
    console.error("Error fetching categories:", error);
  }
};

  const handleCloseModal = () => {
    setShowModal(false);
  };

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
      return;
    }
  
    try {
      const response = await axios.post("http://localhost:5001/api/categories", {
        name: newCategoryName, // ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
        type: newCategoryType || "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏ô‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      });
      if (response.data.success) {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        fetchCategories(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
        setNewCategoryName(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } else {
        alert(response.data.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
      }
    } catch (error) {
      console.error("Error adding category:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
    }
  };
  
  const handleDeleteCategory = async (id) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      try {
        const response = await axios.delete(`http://localhost:5001/api/categories/${id}`);
        if (response.data.success) {
          alert("‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
          fetchCategories(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        }
      } catch (error) {
        console.error("Error deleting category:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
      }
    }
  };
  
  const handleSaveCategory = (index, updatedName) => {
    if (!updatedName.trim()) {
      alert("‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
      return;
    }
    const updatedCategories = [...categories];
    updatedCategories[index].category_name = updatedName; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï category_name ‡∏Ç‡∏≠‡∏á index ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    setCategories(updatedCategories); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
    setEditingRow(null); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  };
  
  const handleEditCategory = async (id, updatedName, updatedType) => {
    if (!updatedName) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
      return;
    }
  
    try {
      const response = await axios.put(`http://localhost:5001/api/categories/${id}`, {
        name: updatedName,
        type: updatedType || "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
      });
      if (response.data.success) {
        alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        fetchCategories(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      }
    } catch (error) {
      console.error("Error updating category:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó");
    }
  };
  
  
  const fetchCategories = async () => {
    try {
      const response = await axios.get("http://localhost:5001/api/categories");
      if (response.data.success) {
        setCategories(response.data.data);
      }
    } catch (error) {
      console.error("Error fetching categories:", error);
    }
  };

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get("http://localhost:5001/api/categories");
        if (response.data.success) {
          setCategories(response.data.data);
          console.log("Categories fetched:", response.data.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    };

    fetchEquipments();
}, []);


  const fetchEquipments = async () => {
    try {
        const response = await axios.get("http://localhost:5001/api/products");
        if (response.data.success) {
            const uniqueEquipments = response.data.data.filter(
                (item, index, self) =>
                    index === self.findIndex((t) => t.equipment === item.equipment)
            );
            setEquipments(uniqueEquipments); // ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏≤‡∏¢
        }
    } catch (error) {
        console.error("Error fetching equipments:", error);
    }
};

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ fetchEquipments ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Modal
  const handleShowEquipmentsModal = () => {
    setShowEquipmentsModal(true);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î Modal
  const closeEquipmentsModal = () => {
    setShowEquipmentsModal(false);
  };

  const handleEditEquipment = (index) => {
    setEditingEquipmentRow(index); // ‡∏ï‡∏±‡πâ‡∏á row ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    setNewEquipment(equipments[index]?.equipment || ""); // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô input
  };
  

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
  const handleAddEquipment = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!newEquipment.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
      return;
    }
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå
    const defaultSerial = "‡πÑ‡∏°‡πà‡∏°‡∏µ";
    const defaultInventory = 1; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const defaultDetails = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";
    
    try {
      const response = await axios.post("http://localhost:5001/api/products", {
        name: newEquipment, // ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å)
        brand_name: newBrand || "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        equipment_number: newEquipmentNumber || "-", // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "-" ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å
        serial_number: newSerial || defaultSerial,
        inventory_number: newInventory || defaultInventory,
        remaining: newInventory || defaultInventory, // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        details: newDetails || defaultDetails,
      });
    
      if (response.data.success) {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        fetchEquipments(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        setNewEquipment(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ input
      } else {
        alert(response.data.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
      }
    } catch (error) {
      console.error("Error adding equipment:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
    }
  };
  

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const handleSaveEquipment = async (index) => {
    if (!newEquipment.trim()) {
      alert("‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
      return;
    }
  
    try {
      const response = await axios.put(
        `http://localhost:5001/api/products/${equipments[index].id}`,
        { name: newEquipment }
      );
  
      if (response.data.success) {
        const updatedEquipments = [...equipments];
        updatedEquipments[index].equipment = newEquipment; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setEquipments(updatedEquipments); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
        setEditingEquipmentRow(null); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setNewEquipment(""); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤
        alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
      }
    } catch (error) {
      console.error("Error saving equipment:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  const handleDeleteEquipment = async (index) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      try {
        const response = await axios.post("http://localhost:5001/api/products/delete", {
          ids: [equipments[index].id],
        });
  
        if (response.data.success) {
          const updatedEquipments = equipments.filter((_, i) => i !== index);
          setEquipments(updatedEquipments); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state
          alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        } else {
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
        }
      } catch (error) {
        console.error("Error deleting equipment:", error);
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");
      }
    }
  };
  
  
  const getUniqueEquipments = (data) => {
    const uniqueEquipments = [];
    const seen = new Set();
    data.forEach((item) => {
      if (!seen.has(item.name)) {
        seen.add(item.name);
        uniqueEquipments.push(item);
      }
    });
    return uniqueEquipments;
  };
  
  
  useEffect(() => {
    fetchEquipments();
  }, []);
  
  useEffect(() => {
    console.log("Updated equipments:", equipments);
  }, [equipments]);
  
  useEffect(() => {
    fetchData();
  }, []);
  
  useEffect(() => {
    console.log("Categories state:", categories);
  }, [categories]);
  

  const fetchBrands = async () => {
    try {
      const response = await axios.get("http://localhost:5001/api/brands");
      if (response.data.success) {
        setBrands(response.data.data); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state
      }
    } catch (error) {
      console.error("Error fetching brands:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏î‡πâ");
    }
  };
  
  
  const handleFetchBrands = async () => {
    try {
      const response = await axios.get("http://localhost:5001/api/brands"); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
      if (response.data.success) {
        setBrands(response.data.data || []); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• state ‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
      } else {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠");
      }
    } catch (error) {
      console.error("Error fetching brands:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå");
    }
  };

  const handleAddBrand = async () => {
    if (!newBrand.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠");
      return;
    }
  
    try {
      const response = await axios.post("http://localhost:5001/api/brands", {
        name: newBrand.trim(),
        category: "‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
      });
  
      if (response.data.success) {
        alert("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô state ‡∏û‡∏£‡πâ‡∏≠‡∏° id
        setBrands([...brands, { id: response.data.id, name: newBrand.trim() }]);
  
        setNewBrand(""); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ input
      }
    } catch (error) {
      console.error("Error adding brand:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠");
    }
  };
  

  const handleDeleteBrand = async (id) => {
    if (!id) {
      alert("ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
      console.error("ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", id); // Debug ID
      return;
    }
  
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
  
    try {
      const response = await axios.delete(`http://localhost:5001/api/brands/${id}`);
      if (response.data.success) {
        alert("‡∏•‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô state ‡πÇ‡∏î‡∏¢‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        setBrands(brands.filter((brand) => brand.id !== id));
      } else {
        alert(response.data.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
      }
    } catch (error) {
      console.error("Error deleting brand:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠");
    }
  };
  
  const handleEditBrand = (index) => {
    console.log("üîπ Editing ID:", brands[index]?.id); // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤ ID
  
    if (!brands[index]?.id) {
      alert("‚ùå ID ‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }
  
    setEditingBrandId(brands[index].id); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    setEditingBrand(brands[index].name || "");
    setEditingBrandIndex(index);
  };
  
  const handleSaveBrand = async (id) => {
    if (!id) {
        alert("‚ùå ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
        console.error("‚ùå ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ:", id); // Debug ID
        return;
    }

    if (!editingBrandName || !editingBrandName.trim()) {
        alert("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ");
        return;
    }

    try {
        console.log("üìå Sending update request:", { id, name: editingBrandName });

        const response = await axios.put(`http://localhost:5001/api/brands/${id}`, {
            name: editingBrandName.trim(),
        });

        if (response.data.success) {
            alert("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

            // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            await fetchBrands(); 

            // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            setEditingBrandName(""); 
            setEditingBrandId(null); 
            setEditingBrandIndex(null); 
        } else {
            alert("‚ùå " + response.data.message);
        }
    } catch (error) {
        console.error("‚ùå Error editing brand:", error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠");
    }
};

useEffect(() => {
  if (showBrandModal) {
      fetchBrands(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î Modal
  }
}, [showBrandModal]);

  const handleShowBrandModal = (index) => {
    setShowBrandModal(true); // ‡πÄ‡∏õ‡∏¥‡∏î Modal
};

const handleCloseBrandModal = () => {
    setShowBrandModal(false);
    setEditingBrandIndex(null);
    setEditingBrandName("");
  };

 useEffect(() => {
  const fetchData = async () => {
    try {
      const categoryRes = await axios.get("/api/categories");
      const equipmentRes = await axios.get("/api/equipments");

      console.log("Categories Data:", categoryRes.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      console.log("Equipments Data:", equipmentRes.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

      if (categoryRes.data.success) setCategories(categoryRes.data.data);
      if (equipmentRes.data.success) setEquipments(equipmentRes.data.data);
    } catch (err) {
      console.error("Error fetching data:", err);
    }
  };

  fetchData();
}, []);

  const handleShowAddProductForm = () => {
    setShowAddProductModal(true); // ‡πÅ‡∏™‡∏î‡∏á Modal
  };

  const handleAddProduct = async (e) => {
    e.preventDefault();
    
    console.log("üìå formData ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API:", formData); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ API
    
    if (!formData.equipment || !formData.category || !formData.brand || !formData.inventory_number) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
    }

    try {
        const response = await axios.post("http://localhost:5001/api/products", formData);
        console.log("üìå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", response.data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å API

        if (response.data.success) {
            alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
            setShowAddProductModal(false);
            fetchProducts(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        } else {
            alert(`‚ùå ${response.data.message}`);
        }
    } catch (error) {
        console.error("‚ùå Error adding product:", error.response?.data || error);
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
};

  const fetchProducts = async () => {
    try {
      const response = await axios.get("http://localhost:5001/api/products");
      if (response.data.success) {
        setProducts(response.data.data);
        console.log("Products:", response.data.data);
      }
    } catch (error) {
      console.error("Error fetching products:", error);
    }
  };


  const fetchDropdownData = async () => {
    try {
        const equipmentResponse = await axios.get("http://localhost:5001/api/products");
        const categoryResponse = await axios.get("http://localhost:5001/api/categories");
        const brandResponse = await axios.get("http://localhost:5001/api/brands");

        console.log("üìå Equipment API Response:", equipmentResponse.data); // ‚úÖ Debug Response
        console.log("üìå Category API Response:", categoryResponse.data);
        console.log("üìå Brand API Response:", brandResponse.data);

        if (equipmentResponse.data.success) {
            const uniqueEquipments = equipmentResponse.data.data
                .filter((item) => item.name) // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
                .map((item) => ({
                    id: item.id,
                    name: item.name || item.material || "N/A",
                }))
                .filter((item, index, self) =>
                    index === self.findIndex((t) => t.name === item.name)
                ); // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å

            console.log("üìå ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î:", uniqueEquipments);
            setEquipments(uniqueEquipments);
        }

        if (categoryResponse.data.success) {
            setCategories(categoryResponse.data.data.map((item) => ({
                id: item.id,
                name: item.category_name,
            })));
        }

        if (brandResponse.data.success) {
            setBrands(brandResponse.data.data.map((item) => ({
                id: item.id,
                name: item.name,
            })));
        }
    } catch (error) {
        console.error("‚ùå Error fetching dropdown data:", error);
    }
};

useEffect(() => {
    fetchDropdownData();
}, []);

  
  
  useEffect(() => {
    fetchProducts();
  }, []);
  
const handleShowAddProductModal = () => setShowAddProductModal(true);

useEffect(() => {
  fetchDropdownData(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown
}, []);


const handleCloseAddProductModal = () => {
  setShowAddProductModal(false); // ‡∏õ‡∏¥‡∏î Modal
};

const [formData, setFormData] = useState({
  model: "",
  name: "",
  category: "",
  brand: "",
  serial_number: "-",
  inventory_number: 1,
  details: "-",
  equipment_number: "-"
});


const handleChange = (e) => {
  const { name, value } = e.target;

  setFormData((prevState) => ({
    ...prevState,
    [name]: value.trim() === "_" ? "" : value, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô `_` ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô input
  }));
};



const handleSubmit = async (e) => {
  e.preventDefault();

  // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const updatedFormData = {
    model: formData.model || formData.name || "-",  // ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ = model
    category_name: formData.category || "-", // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    name: formData.equipment || "-",  // ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    brand_name: formData.brand || "-",  // ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
    serial_number: formData.serial_number || "-",  // Serial
    equipment_number: formData.equipment_number || "-",  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    inventory_number: formData.inventory_number || 1, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô = 1)
    details: formData.details || "-", // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  };

  console.log("üìå formData ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ API:", updatedFormData); // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤ formData
  
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!updatedFormData.name || !updatedFormData.category_name || !updatedFormData.brand_name || !updatedFormData.inventory_number) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î:", {
          model: updatedFormData.model,
          category_name: updatedFormData.category_name,
          name: updatedFormData.name,
          brand_name: updatedFormData.brand_name,
          serial_number: updatedFormData.serial_number,
          equipment_number: updatedFormData.equipment_number,
          inventory_number: updatedFormData.inventory_number
      });
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
      return;
  }

  try {
      const response = await axios.post("http://localhost:5001/api/products", updatedFormData);
      console.log("üìå ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:", response.data); // ‚úÖ Debug ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å API

      if (response.data.success) {
          alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          setShowAddProductModal(false);
          fetchProducts(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      } else {
          alert(`‚ùå ${response.data.message}`);
      }
  } catch (error) {
      console.error("‚ùå Error adding product:", error.response?.data || error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  }
};


useEffect(() => {
  console.log("Equipments:", equipments);
  console.log("Categories:", categories);
  console.log("Brands:", brands);
}, [equipments, categories, brands]);

useEffect(() => {
  if (showModal || showEquipmentsModal || showBrandModal || showAddProductModal || showEditModal) {
    document.body.classList.add('modal-open');
  } else {
    document.body.classList.remove('modal-open');
  }
}, [showModal, showEquipmentsModal, showBrandModal, showAddProductModal, showEditModal]);


  return (
    <div>
      <ITDashboard />
      <div className="settings-container">
          <h1><FontAwesomeIcon icon={faCog} style={{ marginRight: "10px" }} /> ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h1>
          <div className="actions-container">
          <button
  className="delete-selected-btn"
  onClick={handleDeleteSelected}
  disabled={selectedItems.length === 0} // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
>
  üóëÔ∏è ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ({selectedItems.length})
</button>

            <button className="custom-btn" onClick={handleShowModal}>
              <span className="custom-btn-icon">üñâ</span> ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            </button>
            <button className="custom-btn" onClick={handleShowEquipmentsModal}>
              <span className="custom-btn-icon">üñâ</span> ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            </button>
            <button className="custom-btn" onClick={() => handleShowBrandModal("brand")}>
              <span className="custom-btn-icon">üñâ</span> ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠
            </button>
            <button className="add-product-btn" onClick={handleShowAddProductForm}>
              <span className="material-icons">add</span>
              ‡πÄ‡∏û‡∏¥‡πà‡∏°
            </button>
          </div>
          <table className="settings-table">
            <thead>
              <tr>
                <th>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                <th>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                <th>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                <th>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</th>
                <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå</th>
                <th>serial</th>
                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                <th>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th> 
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {data.map((item, index) => ( // ‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡πÉ‡∏ô map
                <tr key={item.id}>
                  <td>
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(item.id)}
                    onChange={() => handleCheckboxChange(item.id)}
                  />
                  </td>
                  <td>{item.material}</td>
                  <td>{item.category || "-"}</td>
                  <td>{item.equipment}</td>
                  <td>{item.brand}</td>
                  <td>{item.equipment_number}</td>
                  <td>{item.serial_number}</td>
                  <td>{item.inventory_number}</td>
                  <td>{item.remaining}</td> {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô */}
                  <td>{item.details || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}</td> {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
                  <td>
                    <button className="edit-btn" onClick={() => handleEditClick(item)}>
                      ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      {showModal && (
        <div className="modal">
          <div className="modal-content modal-wide">
            <h2 className="modal-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</h2>
            <button className="close-btn" onClick={handleCloseModal}>
              X
            </button>
            <div className="modal-input-group">
              <input
                type="text"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà"
                value={newCategoryName} // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ñ‡πà‡∏≤ state
                onChange={(e) => setNewCategoryName(e.target.value)} // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
              />
              <button className="modal-add-btn" onClick={handleAddCategory}>
                ‡πÄ‡∏û‡∏¥‡πà‡∏°
              </button>
            </div>
            <table className="modal-table">
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                  <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {categories.map((category, index) => (
                  <tr key={index}>
                    <td>{index + 1}</td>
                     <td>
                        {editingRow === index ? (
                          <input
                            type="text"
                            value={newCategory}
                            onChange={(e) => setNewCategory(e.target.value)}
                          />
                      ) : (
                        category.category_name
                      )}
                    </td>
                    <td>
                      {editingRow === index ? (
                        <>
                          <button
                            className="save-btn"
                            onClick={() => handleSaveCategory(index, newCategory)}
                          >
                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                          </button>
                          <button
                            className="cancel-btn"
                            onClick={() => setEditingRow(null)}
                          >
                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                          </button>
                        </>
                      ) : (
                      <>
                        <button
                          className="edit-btn"
                          onClick={() => {
                            setEditingRow(index);
                            setNewCategory(category.category_name);
                          }}
                        >
                          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </button>
                        <button
                          className="delete-btn"
                          onClick={() => handleDeleteCategory(category.id)}
                        >
                          ‡∏•‡∏ö
                        </button>
                        </>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
      {showEquipmentsModal && (
          <div className="modal">
            <div className="modal-content modal-wide">
              <h2 className="modal-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</h2>
              <button className="close-btn" onClick={closeEquipmentsModal}>
                X
              </button>
              <div className="modal-input-group">
                <input
                  type="text"
                  className="modal-input"
                  value={newEquipment}
                  placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà"
                  onChange={(e) => setNewEquipment(e.target.value)}
                />
                <button className="modal-add-btn" onClick={handleAddEquipment}>
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°
                </button>
              </div>
              <table className="modal-table">
                <thead>
                  <tr>
                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</th>
                    <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
  {equipments.length > 0 ? (
    equipments.map((equipment, index) => (
      <tr key={index}>
        <td>{index + 1}</td>
        <td>
          {editingEquipmentRow === index ? (
            <input
              type="text"
              value={newEquipment}
              onChange={(e) => setNewEquipment(e.target.value)}
            />
          ) : (
            equipment.equipment
          )}
        </td>
        <td>
          {editingEquipmentRow === index ? (
            <>
              <button className="save-btn" onClick={() => handleSaveEquipment(index)}>
                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              </button>
              <button className="cancel-btn" onClick={() => setEditingEquipmentRow(null)}>
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </>
          ) : (
            <>
              <button className="edit-btn" onClick={() => handleEditEquipment(index)}>
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </button>
              <button className="delete-btn" onClick={() => handleDeleteEquipment(index)}>
                ‡∏•‡∏ö
              </button>
            </>
          )}
        </td>
      </tr>
    ))
  ) : (
    <tr>
      <td colSpan="3">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</td>
    </tr>
  )}
</tbody>
              </table>
            </div>
          </div>
        )}
        {/* Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ */}
        {showBrandModal && (
          <div className="modal">
            <div className="modal-content">
              <h2 className="modal-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</h2>
              <button className="close-btn" onClick={handleCloseBrandModal}>
                X
              </button>
              <div className="modal-input-group">
                <input
                  type="text"
                  className="modal-input"
                  value={newBrand}
                  placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà"
                  onChange={(e) => setNewBrand(e.target.value)}
                />
                <button className="modal-add-btn" onClick={handleAddBrand}>
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°
                </button>
              </div>
              <table className="modal-table">
                <thead>
                  <tr>
                    <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</th>
                    <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
    {brands.map((brand, index) => (
        <tr key={brand.id}>
            <td>{index + 1}</td>
            <td>
                {editingBrandIndex === index ? (
                    <input
                        type="text"
                        value={editingBrandName}
                        onChange={(e) => setEditingBrandName(e.target.value)}
                    />
                ) : (
                    brand.name
                )}
            </td>
            <td>
                {editingBrandIndex === index ? (
                    <>
                        <button className="save-btn" onClick={() => handleSaveBrand(brand.id)}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                        <button className="cancel-btn" onClick={() => setEditingBrandIndex(null)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    </>
                ) : (
                    <>
                        <button className="edit-btn" onClick={() => handleEditBrand(index)}>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                        <button className="delete-btn" onClick={() => handleDeleteBrand(brand.id)}>‡∏•‡∏ö</button>
                    </>
                )}
            </td>
        </tr>
    ))}
</tbody>
              </table>
            </div>
          </div>
        )}
      {showEditModal && currentEditItem && (
  <div className="modal">
    <div className="modal-content">
      <h2>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
      <button className="close-btn" onClick={() => setShowEditModal(false)}>
        X
      </button>
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          handleSave();
        }}
      >
        <div className="form-grid">
          <div className="form-row">
            <label>‡∏ä‡∏∑‡πà‡∏≠:</label>
            <input
              type="text"
              value={currentEditItem.name}
              onChange={(e) =>
                setCurrentEditItem({ ...currentEditItem, name: e.target.value })
              }
            />
          </div>
          <div className="form-row">
            <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
            <select
              value={currentEditItem.category}
              onChange={(e) =>
                setCurrentEditItem({
                  ...currentEditItem,
                  category: e.target.value,
                })
              }
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
              {filters.categories.map((category, index) => (
                <option key={index} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
          <div className="form-row">
            <label>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
            <select
              value={currentEditItem.equipment}
              onChange={(e) =>
                setCurrentEditItem({
                  ...currentEditItem,
                  equipment: e.target.value,
                })
              }
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>
              {filters.equipment.map((equip, index) => (
                <option key={index} value={equip}>
                  {equip}
                </option>
              ))}
            </select>
          </div>
          <div className="form-row">
  <label>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</label>
  <select
    value={currentEditItem.brand_name}
    onChange={(e) =>
      setCurrentEditItem({ ...currentEditItem, brand_name: e.target.value })
    }
  >
    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
    {filters.brands.map((brand, index) => (
      <option key={index} value={brand}>
        {brand}
      </option>
    ))}
  </select>
</div>
          <div className="form-row">
            <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå:</label>
            <input
              type="text"
              value={currentEditItem.equipment_number}
              onChange={(e) =>
                setCurrentEditItem({
                  ...currentEditItem,
                  equipment_number: e.target.value,
                })
              }
            />
          </div>
          <div className="form-row">
            <label>Serial:</label>
            <input
              type="text"
              value={currentEditItem.serial_number}
              onChange={(e) =>
                setCurrentEditItem({
                  ...currentEditItem,
                  serial_number: e.target.value,
                })
              }
            />
          </div>
          <div className="form-row">
            <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
            <input
              type="number"
              value={currentEditItem.inventory_number}
              onChange={(e) =>
                setCurrentEditItem({
                  ...currentEditItem,
                  inventory_number: e.target.value,
                })
              }
            />
          </div>
          <div className="form-row">
            <label>‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</label>
            <input
              type="number"
              value={currentEditItem.remaining}
              readOnly
            />
          </div>
        </div>
        <div className="form-row">
          <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
          <textarea
            value={currentEditItem.details || ""}
            onChange={(e) =>
              setCurrentEditItem({ ...currentEditItem, details: e.target.value })
            }
          />
        </div>
        <div className="form-actions">
          <button type="submit" className="save-btn">
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
          <button
            type="button"
            className="cancel-btn"
            onClick={() => setShowEditModal(false)}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </form>
    </div>
  </div>
)}
{showAddProductModal && (
  <div className="modal">
    <div className="modal-content">
      <h2>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏™‡∏î‡∏∏</h2>
      <button className="close-btn" onClick={handleCloseAddProductModal}>
                &times;
              </button>
      <form onSubmit={handleAddProduct}>
        <div className="form-grid">
          {/* ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <div className="form-row">
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
            <input
              type="text"
              name="name"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
              value={formData.name || ""}
              onChange={handleChange}
              required
            />
          </div>

          {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó */}
          <div className="form-row">
            <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</label>
            <select name="category" value={formData.category || ""} onChange={handleChange} required>
  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
  {categories.length > 0 ? (
    categories.map((category) => (
      <option key={category.id} value={category.name}>
        {category.name}
      </option>
    ))
  ) : (
    <option value="">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option>
  )}
</select>

          </div>

          {/* ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå */}
          
          <div className="form-row">
  <label>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:</label>
  <select 
    name="equipment" 
    value={formData.equipment || ""} 
    onChange={(e) => {
        console.log("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:", e.target.value); // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        setFormData(prevFormData => ({
            ...prevFormData,
            equipment: e.target.value
        }));
    }}
  >
    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</option>
    {equipments.length > 0 ? (
        equipments.map((equipment, index) => (
            <option key={index} value={equipment.equipment || ""}>
                {equipment.equipment || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </option>
        ))
    ) : (
        <option value="">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</option>
    )}
  </select>
</div>


          {/* ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ */}
          <div className="form-row">
            <label>‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠:</label>
            <select
              name="brand"
              value={formData.brand || ""}
              onChange={handleChange}
              required
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠</option>
              {brands.map((brand) => (
                <option key={brand.id} value={brand.name}>
                  {brand.name}
                </option>
              ))}
            </select>
          </div>

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå */}
          <div className="form-row">
            <label>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå:</label>
            <input
              type="text"
              name="equipment_number"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"
              value={formData.equipment_number || ""}
              onChange={handleChange}
              required
            />
          </div>

          {/* Serial */}
          <div className="form-row">
            <label>Serial:</label>
            <input
              type="text"
              name="serial_number"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å Serial Number"
              value={formData.serial_number || ""}
              onChange={handleChange}
            />
          </div>

          {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô */}
          <div className="form-row">
            <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</label>
            <input
              type="number"
              name="inventory_number"
              placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
              min="1"
              value={formData.inventory_number || 1}
              onChange={handleChange}
              required
            />
          </div>

          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
          <div className="form-row">
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
            <textarea
              name="details"
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
              value={formData.details || ""}
              onChange={handleChange}
            />
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="save-btn">
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </button>
          <button
            type="button"
            className="cancel-btn"
            onClick={() => setShowAddProductModal(false)}
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
        </div>
      </form>
    </div>
  </div>
)}

    </div>
  );
};

export default Settings;
