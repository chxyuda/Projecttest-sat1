import React, { useEffect, useState } from 'react';
import Header from "../Header";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import userIcon from '../assets/icon1.png';
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faWarehouse,
  faCogs,
  faUsers,
  faFileAlt,
  faTachometerAlt,
  faSignOutAlt
} from "@fortawesome/free-solid-svg-icons";
import './DashboardApprover.css';

const DashboardApprover = () => {
  const [currentTime, setCurrentTime] = useState('');
  const [currentDate, setCurrentDate] = useState('');
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    if (!storedUser || !storedUser.username) {
      alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      window.location.href = "/login";
      return;
    }

    axios.get(`http://localhost:5001/api/profile?username=${storedUser.username}`)
      .then(response => {
        setUserData(response.data);
        setLoading(false);
      })
      .catch(() => {
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
        setLoading(false);
      });
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date();
      const dayNames = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
      const monthNames = ["‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"];
      const dayName = dayNames[now.getDay()];
      const day = now.getDate();
      const month = monthNames[now.getMonth()];
      const year = now.getFullYear() + 543;

      setCurrentTime(now.toLocaleTimeString("th-TH", { hour12: false }));
      setCurrentDate(`${dayName}‡∏ó‡∏µ‡πà ${day} ${month} ${year}`);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const handleLogout = () => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
      localStorage.removeItem("user");
      alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß!");
      setTimeout(() => window.location.href = "/", 500);
    }
  };

  return (
    <div className="approver-dashboard">
      <Header currentTime={currentTime} currentDate={currentDate} />
      <div className="navbar-approver">
        <div className="navbar">
          <span onClick={() => navigate("/")}> <FontAwesomeIcon icon={faWarehouse} /> ‡∏Ñ‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏™‡∏î‡∏∏</span>
          <span onClick={() => navigate("/")}> <FontAwesomeIcon icon={faCogs} />‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏ö‡∏¥‡∏Å</span>
          <span onClick={() => navigate("/")}> <FontAwesomeIcon icon={faUsers} /> ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô</span>
          <span onClick={() => navigate("/")}> <FontAwesomeIcon icon={faFileAlt} /> ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å-‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô</span>
          <span onClick={() => navigate("/")}> <FontAwesomeIcon icon={faTachometerAlt} /> Dashboard</span>
          <span onClick={handleLogout} className="logout"> <FontAwesomeIcon icon={faSignOutAlt} /> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>
          <div className="approver-info">
            <img src={userData?.image || userIcon} alt="User Icon" className="user-icon" />
            <span>{userData?.department_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ù‡πà‡∏≤‡∏¢/‡∏™‡∏≥‡∏ô‡∏±‡∏Å"}</span>
          </div>
        </div>
      </div>

      {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô */}
      <div className="profile-card">
        <h2 className="dashboard-title"> <FontAwesomeIcon icon={faUsers} color="red" /> ‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
        <img src={userData?.image || userIcon} alt="User Icon" className="user-icon" />
        <h3 className="user-name">{userData?.fullName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠"}</h3>
        <p className="user-email">üìß {userData?.email}</p>
        <p className="user-department">üè¢ ‡∏ù‡πà‡∏≤‡∏¢: {userData?.department_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ù‡πà‡∏≤‡∏¢"}</p>
      </div>
    </div>
  );
};

export default DashboardApprover;
